apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
	ext.mainClass = 'com.neuronrobotics.bowlerstudio.BowlerStudio'
}
File buildDir = file(".");

Properties props = new Properties()
props.load(new FileInputStream(buildDir.getAbsolutePath()+"/src/main/resources/com/neuronrobotics/bowlerstudio/build.properties"))

		boolean is64Bit() {
			////System.out.println("Arch: "+getOsArch());
			return getOsArch().startsWith("x86_64") || getOsArch().startsWith("amd64");
		}
		 boolean isARM() {
			return getOsArch().startsWith("arm");
		}
		 boolean isCortexA8(){
			if(isARM()){
				//TODO check for cortex a8 vs arm9 generic
				return true;
			}
			return false;
		}
		 boolean isWindows() {
			////System.out.println("OS name: "+getOsName());
			return getOsName().toLowerCase().startsWith("windows") ||getOsName().toLowerCase().startsWith("microsoft") || getOsName().toLowerCase().startsWith("ms");
		}
		
		 boolean isLinux() {
			return getOsName().toLowerCase().startsWith("linux");
		}
		
		 boolean isOSX() {
			return getOsName().toLowerCase().startsWith("mac");
		}
		
		 String getExtension() {
			if(isWindows()) {
				return ".dll";
			}
			
			if(isLinux()) {
				return ".so";
			}
			
			if(isOSX()) {
				return ".jnilib";
			}
			
			return "";
		}
		
		String getOsName() {	
			return System.getProperty("os.name");
		}
		
		String getOsArch() {
			return System.getProperty("os.arch");
		}

repositories {
	mavenCentral()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/'  }
	maven { url 'http://repo.jenkins-ci.org/public/' }
	maven { url 'http://clojars.org/repo' }
	
}

task wrapper(type: Wrapper) { gradleVersion = '2.1' }

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.10'

	compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.6'
	compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.6', classifier: 'sources'

	compile group: 'org.reactfx', name: 'reactfx', version: '2.0-SNAPSHOT'
	compile group: 'org.reactfx', name: 'reactfx', version: '2.0-SNAPSHOT', classifier: 'sources'

	compile group: 'org.codehaus.groovy', name: 'groovy', version:'2.3.7';
	compile group: 'org.codehaus.groovy', name: 'groovy', version:'2.3.7', classifier: 'sources';
	compile group: 'org.codehaus.groovy', name: 'groovy', version:'2.3.7', classifier: 'javadoc';

	compile group: 'org.controlsfx', name: 'controlsfx', version: '8.0.6'
	compile group: 'org.controlsfx', name: 'controlsfx', version: '8.0.6', classifier: 'sources'
	compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
	compile group: 'commons-codec', name: 'commons-codec', version: '1.7'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.2.3'
	compile group: 'org.kohsuke.stapler', name: 'stapler-jetty', version: '1.1'
	
	compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '4.0.1.201506240215-r'
	
	compile group: 'com.squareup.okhttp', name: 'okhttp-urlconnection', version: '2.0.0'
	compile group: 'org.kohsuke', name: 'wordnet-random-name', version: '1.2'
	compile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
	compile group: 'com.infradna.tool', name: 'bridge-method-injector', version: '1.14'
	compile group: 'org.kohsuke', name: 'github-api', version: '1.66'
	compile 'com.miglayout:miglayout-swing:4.2'
	compile 'commons-io:commons-io:2.4'
	compile group:'org.python',name:'jython',version:'2.5.3'
	compile group:'org.python',name:'jython-standalone',version:'2.5.2'
	compile 'org.clojure:clojure:1.7.0'
	compile 'org.clojure:tools.nrepl:0.2.10'
	compile "overtone:overtone:0.9.1"
	compile "edu.cmu.sphinx:sphinx4-core:1.0-SNAPSHOT"
	compile "edu.cmu.sphinx:sphinx4-data:1.0-SNAPSHOT"
			
	compile project(':JCSG')
	compile project(':CHDK-PTP-Java')
	//compile project(':java-bowler')
	compile project(':WalnutiQ')
	
	String basedir =System.getenv("OPENCV_DIR")+"/../../java/opencv-249.jar";
	println("OPENCV_DIR="+basedir);
	if(isWindows()){

		compile files(basedir)
	}
	if(isOSX()){
		if(System.getenv("OPENCV_DIR")!=null)
			compile files(basedir)
		else
			//If you set your OPENCV_DIR environment variable, then we wouldnt have to do hacky things
			compile files('/Volumes/Snow Leopard/Applications/BowlerStudio.app/Contents/MacOS/opencv249build/bin/opencv-249.jar')
	}
	if(isLinux()){
		//compile files('/usr/share/java/opencv-249.jar')
		compile fileTree (dir: '/usr/share/java/', includes: ['*opencv-24*.jar'])
	}
	
//	compile group: 'org.bytedeco', name: 'javacv', version: '0.9';
//	compile group: 'org.bytedeco', name: 'javacpp', version: '0.9';
//	 //found at https://github.com/bytedeco/javacv/issues/122
//	compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '2.4.9-0.9', classifier: "linux-x86";		
//	compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '2.4.9-0.9', classifier: "linux-x86_64";	
//	compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '2.4.9-0.9', classifier: "macosx-x86_64";	
//	compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '2.4.9-0.9', classifier: "windows-x86";		
//	compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '2.4.9-0.9', classifier: "windows-x86_64";
	
	compile group: 'jfree', name: 'jfreechart', version: '1.0.12'
	compile group: 'jexcelapi', name: 'jxl', version: '2.4.2'
	compile group: 'com.google.zxing', name: 'zxing-parent', version: '3.2.0'
	compile group:'com.github.ellzord', name:'JALSE', version:'1.0.9'
	
	compile group:'de.huxhorn.sulky', name:'de.huxhorn.sulky.3rdparty.jlayer', version:'1.0'
	compile group:'com.googlecode.json-simple', name:'json-simple', version:'1.1'
	compile 'com.fifesoft:rsyntaxtextarea:2.5.6'
	
	compile fileTree (dir: 'libs', includes: ['*.jar'])
}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {
	jar.baseName= "BowlerStudio";
	doFirst {
		
		// dependencies except VRL
		from (configurations.runtime.asFileTree.
				filter({file->return !file.name.startsWith("vrl-0")}).
				files.collect { zipTree(it) } ){
					exclude 'META-INF/MANIFEST.MF'
					exclude 'META-INF/*.SF'
					exclude 'META-INF/*.DSA'
					exclude 'META-INF/*.RSA'
				}
	}

	// project class files compiled from source
	from files(sourceSets.main.output.classesDir)

	manifest {  
	    attributes(	
	    				"Main-Class": mainClass,
	    				"SplashScreen-Image": "com/neuronrobotics/nrconsole/images/logo.png",
		    			"Manifest-Version": "1.0",
		    			"Created-By": "Neuron Robotics Cooperative",
		    			"Specification-Title": props."app.name",
		    			"Specification-Version": props."app.version",
		    			"Specification-Vendor": "Neuron Robotics Cooperative",,
		    			"Implementation-Title": props."app.name",
		    			"Implementation-Version" : props."app.version",
		    			"Implementation-Vendor": "Neuron Robotics Cooperative"

		        		
		    )
		}
}

task run(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = mainClass;
	//    jvmArgs = ['-Dprism.forceGPU=true', '-Dprism.verbose=true']
	jvmArgs = ['-Dprism.forceGPU=true']
}
